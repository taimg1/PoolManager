@page "/pool_poolsize"

@inject IPoolService PoolService
@inject IService<PoolSizeDto, PoolSizeCreateDto, PoolSizeUpdateDto> PoolSizeService
@inject AuthorizeAdmin AuthorizeAdmin
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Pool_PoolSize</h3>
<div class="row mt-5 d-flex justify-content-around">
    <div class="col-12 col-md-6 shadow-sm mx-5">
        <div class="form-floating mt-2">
            <h2>Pool list</h2>
        </div>
        <div class="form-group mt-2">
            <button class="btn btn-primary" @onclick="CreatePage" type="submit">Create</button>
        </div>
        <div class="input-group mb-3">
            <InputNumber TValue="int" class="form-control" placeholder="Search" @bind-Value="SearchValue1" aria-label="Search" aria-describedby="button-addon2" />
            <button class="btn btn-primary" @onclick="()=> SearchButtonPool()" type="button" id="button-addon2">Search</button>
        </div>
        <div class="form-floating mb-3">
            <table class="table table-hover">
                <thead>
                    <tr>                  
                        <th>Pool number</th>
                        <th>Size</th>
                        <th>Temperature</th>
                        <th>Total capacity</th>
                        <th>Edit</th>
                        <th>Delete</th>
                        <th>Get Docx</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var pool in poolDtos)
                    {
                        <tr>
                            <td>@pool.Id</td>
                            <td>@pool.Size.Title</td>
                            <td>@pool.Temperature</td>
                            <td>@pool.TotalCapacity</td>
                            <td>
                                <button class="btn btn-primary"
                                    @onclick="()=> ShowPool(pool.Id)">
                                    <i class="oi oi-pencil"></i>
                                </button>
                            </td>
                            <td>
                                <button class="btn btn-danger"
                                        @onclick="()=> DeletePool(pool.Id)">
                                    <i class="bi bi-trash3"></i>
                                </button>
                            </td>
                            <td>
                                <button class="btn btn-primary"
                                        @onclick="()=> GetDocx(pool.Id)">
                                    <i class="oi oi-document"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="col-12 col-md-4 shadow-sm mx-5">
        <div class="form-floating mt-2">
            <h2>Pool size list</h2>
        </div>
        <div class="form-group mt-2">
            <button class="btn btn-primary" @onclick="CreatePagePoolSize" type="submit">Create</button>
        </div>
        <div class="input-group mb-3">
            <InputNumber TValue="int" class="form-control" placeholder="Search" @bind-Value="SearchValue2" aria-label="Search" aria-describedby="button-addon2" />
            <button class="btn btn-primary" @onclick="()=> SearchButtonPoolSize()" type="button" id="button-addon2">Search</button>
        </div>
        <div class="form-floating mb-3">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Pool size number</th>
                        <th>Title</th>
                        <th>Width</th>
                        <th>Length</th>
                        <th>Height</th>
                        <th>Edit</th>  
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var poolSize in poolSizeDtos)
                    {
                        <tr>
                            <td>@poolSize.Id</td>
                            <td>@poolSize.Title</td>
                            <td>@poolSize.Width</td>
                            <td>@poolSize.Length</td>
                            <td>@poolSize.Height</td>
                            <td>
                                <button class="btn btn-primary"
                                    @onclick="()=> ShowPoolSize(poolSize.Id)">
                                    <i class="oi oi-pencil"></i>
                                </button>
                            </td>
                            <td>
                                <button class="btn btn-danger"
                                        @onclick="()=> DeletePoolSize(poolSize.Id)">
                                    <i class="bi bi-trash3"></i>
                                </button>
                            </td>
                          
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private int SearchValue1 { get; set; }
    private int SearchValue2 { get; set; }
    private List<PoolDto> poolDtos = new List<PoolDto>();
    private List<PoolSizeDto> poolSizeDtos = new List<PoolSizeDto>();
    protected override async Task OnInitializedAsync()
    {
        if (!await AuthorizeAdmin.CheckUserRole())
            return;

        await PoolService.GetAllAsync();
        await PoolSizeService.GetAllAsync();
        poolDtos = PoolService.ItemList;      
        poolSizeDtos = PoolSizeService.ItemList;
    }
    private async Task SearchButtonPool()
    {
        if (SearchValue1 > 0)
        {
            var result = await PoolService.GetByIdAsync(SearchValue1);
            if (result != null)
            {
                PoolService.ItemList = new List<PoolDto> { result };
                return;
            }
        }
        poolDtos = PoolService.ItemList;
    }
    private async Task SearchButtonPoolSize()
    {
        if (SearchValue2 > 0)
        {
            var result = await PoolSizeService.GetByIdAsync(SearchValue2);
            if (result != null)
            {
                poolSizeDtos = new List<PoolSizeDto> { result };
                return;
            }
        }
        poolSizeDtos = PoolSizeService.ItemList;
    }

    public void ShowPool(int id)
    {
        NavigationManager.NavigateTo($"/pool/{id}");
    }
    public void ShowPoolSize(int id)
    {
        NavigationManager.NavigateTo($"/poolsize/{id}");
    }
    public void CreatePage()
    {
        NavigationManager.NavigateTo($"/pool/create");
    }
    public async Task DeletePool(int poolId)
    {
        await PoolService.DeleteAsync(poolId);
        await SearchButtonPool();
    }

    public async Task DeletePoolSize(int poolSizeId)
    {
        await PoolSizeService.DeleteAsync(poolSizeId);
        await SearchButtonPoolSize();
    }
    public void ReloadPage()
    {
        var uri = NavigationManager.Uri;
        NavigationManager.NavigateTo(uri, forceLoad: true);
    }
    public void CreatePagePoolSize()
    {
        NavigationManager.NavigateTo($"/poolsize/create");
    }
    public async Task GetDocx(int poolId)
    {
        var response = await PoolService.GetPoolUsageReport(poolId);
        var fileBytes = await response.Content.ReadAsByteArrayAsync();
        await JSRuntime.InvokeVoidAsync("SaveAsFile", "PoolUsageReport.docx", Convert.ToBase64String(fileBytes));
    }


    
}
