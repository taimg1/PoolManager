@page "/reservation/create"
@attribute [Authorize]

@inject IService<ReservationDto, ReservationCreateDto, ReservationUpdateDto> ReservationService
@inject NavigationManager NavigationManager
@inject IMapper _mapper
@inject SubscriptionService SubscriptionService


<EditForm Model="reservation" class="form-group" OnSubmit="HandleSubmit">
    <div class="row mt-5 ">
        <div class="col-12 col-md-3 border border-dark rounded shadow-sm  mx-auto ">
            <div class="form-group">
                <h2>Reservation</h2>
            </div>
            <div class="form-floating mb-3">
                <InputSelect TValue="int" class="form-control" @bind-Value="reservation.SubscriptionId" id="SubscriptionIdInput">
                    @foreach (var subscription in Subscriptions)
                    {
                        <option value="@subscription.Id">@subscription.Id</option>
                    }
                </InputSelect>
                <label for="SubscriptionIdInput">Subscription</label>
            </div>
            <div class="form-floating mb-3">
                <InputDate TValue="DateTime" class="form-control" id="DateInput" @bind-Value="reservation.Date" placeholder="Date"></InputDate>
                <label for="DateInput">Date</label>
            </div>

            <div class="form-floating mb-3 text-center">
                <button class="btn btn-primary" type="submit">Create</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public ReservationCreateDto reservation = new ReservationCreateDto();
    public IEnumerable<SubscriptionDto> Subscriptions { get; set; } = new List<SubscriptionDto>();
    protected override async Task OnInitializedAsync()
    {
        await SubscriptionService.GetByUser();
        Subscriptions = SubscriptionService.ItemList;
    }

    private async Task HandleSubmit()
    {
        await ReservationService.AddAsyncByUser(reservation);
        NavigationManager.NavigateTo("/visits-reservations");
        
    }
}
