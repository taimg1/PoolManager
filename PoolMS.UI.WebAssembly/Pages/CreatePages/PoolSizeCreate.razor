@page "/poolsize/create"


@inject IService<PoolSizeDto, PoolSizeCreateDto, PoolSizeUpdateDto> PoolSizeService
@inject NavigationManager NavigationManager
@inject IMapper _mapper
@inject AuthorizeAdmin AuthorizeAdmin

<EditForm Model="poolSize" class="form-group" OnSubmit="HandleSubmit">
    <div class="row mt-5 ">
        <div class="col-12 col-md-3 border border-dark rounded shadow-sm  mx-auto ">
            <div class="form-group">
                <h2>Pool size</h2>
            </div>
            <div class="form-floating mb-3">
                <InputText class="form-control" @bind-Value="poolSize.Title" id="titleInput" placeholder="Title" />
                <label for="titleInput">Title</label>
            </div>
            <div class="form-floating mb-3">
                <InputNumber TValue="int" class="form-control" @bind-Value="poolSize.Width" id="WidthInput" placeholder="Width" />
                <label for="WidthInput">Width</label>
            </div>
            <div class="form-floating mb-3">
                <InputNumber TValue="int" class="form-control" @bind-Value="poolSize.Height" id="Height" placeholder="Height" />
                <label for="Height">Height</label>
            </div>
            <div class="form-floating mb-3">
                <InputNumber TValue="int" class="form-control" @bind-Value="poolSize.Length" id="length" placeholder="Height" />
                <label for="length">Height</label>
            </div>
            <div class="form-floating mb-3 text-center">
                <button class="btn btn-primary" type="submit">Create</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public PoolSizeCreateDto poolSize = new PoolSizeCreateDto();
    protected override async Task OnInitializedAsync()
    {
        if (!await AuthorizeAdmin.CheckUserRole()) 
            return;
    }
    private async Task HandleSubmit()
    {      
        await PoolSizeService.AddAsync(poolSize);
        NavigationManager.NavigateTo("/pool_poolsize");
    }
}
