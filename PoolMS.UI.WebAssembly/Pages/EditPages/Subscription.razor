@page "/subscription/{id:int}"
@attribute [Authorize]

@inject IService<SubscriptionDto, SubscriptionCreateDto, SubscriptionUpdateDto> SubscriptionService
@inject IMapper _mapper
@inject NavigationManager NavigationManager
@inject AuthorizeAdmin AuthorizeAdmin

<EditForm Model="subscription" class="form-group" OnSubmit="HandleSubmit">
    <div class="row mt-5 ">
        <div class="col-12 col-md-3 border border-dark rounded shadow-sm  mx-auto ">
            <div class="form-group">
                <h2>Subscription</h2>
            </div>
            <div class="form-floating mb-3">
                <InputNumber TValue="int" class="form-control" @bind-Value="subscription.UserId" id="UserIdInput" placeholder="User id"/>
                <label for="UserIdInput">User id</label>
            </div>
            <div class="form-floating mb-3">
                <InputNumber TValue="int" class="form-control" @bind-Value="subscription.SubTypeId" id="SubtypeIdInput" placeholder="Subtype id"/>
                <label for="SubtypeIdInput">Subtype id</label>
            </div>
            <div class="form-floating mb-3">
                <InputDate TValue="DateTime" class="form-control" @bind-Value="subscription.EndDate" id="DateInput" placeholder="Date"/>
                <label for="DateInput">Date end</label>
            </div>
            <div class="form-floating mb-3 text-center">
                <button class="btn btn-primary" type="submit">Edit</button>
            </div>
        </div>
    </div>
</EditForm>
@code {
    [Parameter]
    public int? Id { get; set; }
    public SubscriptionUpdateDto subscription = new SubscriptionUpdateDto();
    protected override async Task OnParametersSetAsync()
    {
        await AuthorizeAdmin.CheckUserRole();
        if (Id is not null)
        {
            var result = await SubscriptionService.GetByIdAsync((int)Id);
            if (result is not null)
            {
                subscription = _mapper.Map<SubscriptionUpdateDto>(result);
            }
            else
            {
                NavigationManager.NavigateTo("/sub_sybtype");
            }
        }
    }
    private async Task HandleSubmit()
    {
        if (Id is not null)
        {
            await SubscriptionService.UpdateAsync(subscription);
        }
        NavigationManager.NavigateTo("/sub_sybtype");
    }
}
