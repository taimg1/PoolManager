@page "/admin/user/edit/{id:int}"

@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IMapper _mapper
@inject AuthorizeAdmin AuthorizeAdmin

<EditForm Model"user" class="form-group" OnSubmit="HandleSubmit">
    <div class="row mt-5 ">
        <div class="col-12 col-md-3 border border-dark rounded shadow-sm  mx-auto ">
            <div class="form-group">
                <h1 class="text-center">Registration</h1>
            </div>
            <div class="form-floating">
                <div class="row form-floating mb-3">
                    <div class="form-floating col-6">
                        <InputText class="form-control" @bind-Value="user.Fname" id="InputFirstName" placeholder="" required />
                        <label for="InputFirstName">First name</label>
                    </div>
                    <div class="form-floating col-6">
                        <InputText class="form-control" @bind-Value="user.Sname" id="InputLastName" placeholder="" required />
                        <label for="InputLastName">Last name</label>
                    </div>
                </div>
            </div>
            <div class="form-floating mb-3">
                <InputText class="form-control" @bind-Value="user.Email" id="floatingInput" placeholder="name@example.com" />
                <label for="floatingInput">Email address</label>
            </div>
            <div class="form-floating mb-3">
                <InputText class="form-control" @bind-Value="user.Phone" id="InputPhone" placeholder="Phone" required maxlength="11" />
                <label for="InputPhone">Phone</label>
            </div>
            <div class="form-group mb-3 text-center">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
            <div class="form-group mb-3 text-center">
                <a href="/login">Already have an account</a>
            </div>

        </div>
    </div>
</EditForm>
@code {
    [Parameter]
    public int? Id { get; set; }
    private UserUpdateDto user = new UserUpdateDto();
    protected override async Task OnParametersSetAsync()
    {
        if (!await AuthorizeAdmin.CheckUserRole())
            return;
        if (Id is not null)
        {
            var result = await UserService.GetByIdAsync((int)Id);
            if (result is not null)
                user = _mapper.Map<UserUpdateDto>(result);
            else
                NavigationManager.NavigateTo("/users-roles");
        }
    }
    private async Task HandleSubmit()
    {
        await UserService.UpdateUserAdmin(user);
    }

}
