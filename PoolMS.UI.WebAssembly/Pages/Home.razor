@page "/"
@inject IPoolService PoolService
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthService _authService
@inject FasService FasService

<PageTitle>Home</PageTitle>

<link href="~/lib/bootstrap/css/bootstrap.min.css" rel="stylesheet">
<script>
    function ShowVisit(id) {
        window.location.href = "/visits/" + id;
    }
</script>


<div class="row mt-5 justify-content-between">
    <div class="col-12 col-md-6 shadow-sm mx-5">
        <h2>Pool list</h2>
        <div lass="input-group mb-3">
            <label for="filter">Filter pools:</label>
            <select @onchange="FilterPools">
                @foreach (var filter in Filters)
                {
                    <option value="@filter.FilterValue">@filter.FilterName</option>
                }
            </select>
        </div>
        <div class="input-group mb-3">
            <InputText class="form-control" placeholder="Search" @bind-Value="SearchValue" aria-label="Search" aria-describedby="button-addon2" />
            <button class="btn btn-primary" @onclick="()=> SearchButton()" type="button" id="button-addon2">Search</button>
        </div>
        <table class="table table-hover">
            <thead>
                <tr>

                    <th>Pool number</th>
                    <th>Size</th>
                    <th>Temperature</th>
                    <th>Total capacity</th>

                </tr>
            </thead>
            <tbody>
                @if (Pools != null)
                {
                    foreach (var pool in Pools)
                    {
                        <tr>
                            <td>@pool.Id</td>
                            <td>@pool.Size.Title</td>
                            <td>@pool.Temperature</td>
                            <td>@pool.TotalCapacity</td>
                        </tr>
                    }
                }
                else if(Pools == null)
                {
                    <tr>
                        <td colspan="4">No pools found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-12 col-md-4 shadow-sm mx-5">
        <h2>Weather report</h2>
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>
                    <td>Date</td>
                    <td>Temperature</td>
                    <td>Summary</td>
                    </th>
                </tr>
            </thead>
        </table>
    </div>
</div>
<div class="row mt-5 d-flex justify-content-end">
    <div class="col-12 col-md-4 shadow-sm mx-5 ">
        <h2>Useful exercises</h2>

    </div>
</div>

@code {
    public string SelectedFilter { get; set; }
    private List<PoolDto> Pools { get; set; } = new List<PoolDto>();
    private string SearchValue { get; set; }
    public IEnumerable<FilterDto> Filters { get; set; } = new List<FilterDto>()
    {
        new FilterDto("Popular", "popular"),
        new FilterDto("Unpopular", "unpopular"),
        new FilterDto("Pool Size", "poolsize"),
        new FilterDto("Descending Pool Size", "descendingpoolsize"),
        new FilterDto("Temperature", "temperature"),
        new FilterDto("Descending Temperature", "descendingtemperature"),
    };
    protected override async Task OnInitializedAsync()
    {
        await _authService.CheckAndRemoveExpiredToken();
        await PoolService.GetAllAsync();
        Pools = PoolService.ItemList;
    }

    private async Task FilterPools(ChangeEventArgs e)
    {
        SelectedFilter = e.Value.ToString();

        switch (SelectedFilter)
        {
            case "popular":
                await FasService.GetPopular();
                Pools = FasService.ItemList;
                break;
            case "unpopular":
                await FasService.GetUnpopular();
                Pools = FasService.ItemList;
                break;
            case "poolsize":
                await FasService.GetPoolSize();
                Pools = FasService.ItemList;
                break;
            case "descendingpoolsize":
                await FasService.GetDescendingPoolSize();
                Pools = FasService.ItemList;
                break;
            case "temperature":
                await FasService.GetTemperature();
                Pools = FasService.ItemList;
                break;
            case "descendingtemperature":
                await FasService.GetDescendingTemperature();
                Pools = FasService.ItemList;
                break;
            default:
                break;
        }
    }
    public async Task SearchButton()
    {
        SearchDto searchDto = new SearchDto { Search = SearchValue};
        await FasService.Search(searchDto);
        Pools = FasService.ItemList;
    }
    public class FilterDto
    {
        public string FilterName { get; set; }
        public string FilterValue { get; set; }

        public FilterDto(string name, string value)
        {
            FilterName = name;
            FilterValue = value;
        }
    }
}
